{"message":"the trait bound `iced_core::element::Element<'_, _, _>: From<()>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/kartik/.cargo/git/checkouts/iced-f01cba4d5e61fd0a/3a025b0/widget/src/helpers.rs","byte_start":1143,"byte_end":1164,"line_start":37,"line_end":37,"column_start":46,"column_end":67,"is_primary":true,"text":[{"text":"        $crate::Column::with_children(vec![$($crate::core::Element::from($x)),+])","highlight_start":46,"highlight_end":67}],"label":"the trait `From<()>` is not implemented for `iced_core::element::Element<'_, _, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":3716,"byte_end":3752,"line_start":114,"line_end":114,"column_start":19,"column_end":55,"is_primary":false,"text":[{"text":"        container(column![controls, input, bottom_bar].spacing(10)).padding(10).into()","highlight_start":19,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"column!","def_site_span":{"file_name":"/Users/kartik/.cargo/git/checkouts/iced-f01cba4d5e61fd0a/3a025b0/widget/src/helpers.rs","byte_start":997,"byte_end":1016,"line_start":32,"line_end":32,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"macro_rules! column {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  <iced_core::element::Element<'a, Message, Renderer> as From<iced::widget::Column<'a, Message, Renderer>>>\n  <iced_core::element::Element<'a, Message, Renderer> as From<MouseArea<'a, Message, Renderer>>>\n  <iced_core::element::Element<'a, Message, Renderer> as From<Row<'a, Message, Renderer>>>\n  <iced_core::element::Element<'a, Message, Renderer> as From<iced::widget::Button<'a, Message, Renderer>>>\n  <iced_core::element::Element<'a, Message, Renderer> as From<iced::widget::Checkbox<'a, Message, Renderer>>>\n  <iced_core::element::Element<'a, Message, Renderer> as From<ComboBox<'a, T, Message, Renderer>>>\n  <iced_core::element::Element<'a, Message, Renderer> as From<iced::widget::Container<'a, Message, Renderer>>>\n  <iced_core::element::Element<'a, Message, Renderer> as From<iced::widget::keyed::Column<'a, Key, Message, Renderer>>>\nand 17 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `iced_core::element::Element<'_, _, _>: From<()>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:114:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        container(column![controls, input, bottom_bar].spacing(10)).padding(10).into()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<()>` is not implemented for `iced_core::element::Element<'_, _, _>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              <iced_core::element::Element<'a, Message, Renderer> as From<iced::widget::Column<'a, Message, Renderer>>>\u001b[0m\n\u001b[0m              <iced_core::element::Element<'a, Message, Renderer> as From<MouseArea<'a, Message, Renderer>>>\u001b[0m\n\u001b[0m              <iced_core::element::Element<'a, Message, Renderer> as From<Row<'a, Message, Renderer>>>\u001b[0m\n\u001b[0m              <iced_core::element::Element<'a, Message, Renderer> as From<iced::widget::Button<'a, Message, Renderer>>>\u001b[0m\n\u001b[0m              <iced_core::element::Element<'a, Message, Renderer> as From<iced::widget::Checkbox<'a, Message, Renderer>>>\u001b[0m\n\u001b[0m              <iced_core::element::Element<'a, Message, Renderer> as From<ComboBox<'a, T, Message, Renderer>>>\u001b[0m\n\u001b[0m              <iced_core::element::Element<'a, Message, Renderer> as From<iced::widget::Container<'a, Message, Renderer>>>\u001b[0m\n\u001b[0m              <iced_core::element::Element<'a, Message, Renderer> as From<iced::widget::keyed::Column<'a, Key, Message, Renderer>>>\u001b[0m\n\u001b[0m            and 17 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `column` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
